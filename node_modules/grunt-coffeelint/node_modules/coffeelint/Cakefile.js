// Generated by CoffeeScript 1.7.1
(function() {
  var CoffeeScript, browserify, coffeeSync, copySync, fs;

  fs = require('fs');

  browserify = require('browserify');

  CoffeeScript = require('coffee-script');

  copySync = function(src, dest) {
    return fs.writeFileSync(dest, fs.readFileSync(src));
  };

  coffeeSync = function(input, output) {
    var coffee;
    coffee = fs.readFileSync(input).toString();
    return fs.writeFileSync(output, CoffeeScript.compile(coffee));
  };

  task('compile', 'Compile Coffeelint', function() {
    console.log('Compiling Coffeelint...');
    if (!fs.existsSync('lib')) {
      fs.mkdirSync('lib');
    }
    invoke('compile:browserify');
    return invoke('compile:commandline');
  });

  task('compile:commandline', 'Compiles commandline.js', function() {
    coffeeSync('src/commandline.coffee', 'lib/commandline.js');
    return coffeeSync('src/configfinder.coffee', 'lib/configfinder.js');
  });

  task('compile:browserify', 'Uses browserify to compile coffeelint', function() {
    var b, opts;
    b = browserify(['./src/coffeelint.coffee']);
    opts = {
      standalone: 'coffeelint'
    };
    b.transform(require('coffeeify'));
    return b.bundle(opts).pipe(fs.createWriteStream('lib/coffeelint.js'));
  });

  task('prepublish', 'Prepublish', function() {
    var npm_config_argv, packageJson;
    npm_config_argv = process.env.npm_config_argv;
    if ((npm_config_argv != null) && JSON.parse(npm_config_argv).original[0] === 'install') {
      return;
    }
    copySync('package.json', '.package.json');
    packageJson = require('./package.json');
    delete packageJson.dependencies.browserify;
    delete packageJson.dependencies.coffeeify;
    delete packageJson.scripts.install;
    fs.writeFileSync('package.json', JSON.stringify(packageJson, void 0, 2));
    return invoke('compile');
  });

  task('publish', 'publish', function() {
    return copySync('.package.json', 'package.json');
  });

  task('install', 'Install', function() {
    if (!require("fs").existsSync("lib/commandline.js")) {
      return invoke('compile');
    }
  });

}).call(this);

//# sourceMappingURL=Cakefile.map
